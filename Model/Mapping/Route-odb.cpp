// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Route-odb.h"

#include <cassert>
#include <cstring>  // std::memcpy
#include <typeinfo>

#include <odb/polymorphic-map.hxx>

#include <odb/mssql/traits.hxx>
#include <odb/mssql/database.hxx>
#include <odb/mssql/transaction.hxx>
#include <odb/mssql/connection.hxx>
#include <odb/mssql/statement.hxx>
#include <odb/mssql/statement-cache.hxx>
#include <odb/mssql/polymorphic-object-statements.hxx>
#include <odb/mssql/container-statements.hxx>
#include <odb/mssql/exceptions.hxx>
#include <odb/mssql/polymorphic-object-result.hxx>

namespace odb
{
  // RouteInfo
  //

  const char alias_traits<  ::db::Entity,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::origin_tag>::
  table_name[] = "[origin_Entity]";

  const char alias_traits<  ::City,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::origin_tag>::
  table_name[] = "[origin_City]";

  const char alias_traits<  ::db::Entity,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::destination_tag>::
  table_name[] = "[destination_Entity]";

  const char alias_traits<  ::City,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::destination_tag>::
  table_name[] = "[destination_City]";

  struct access::object_traits_impl< ::RouteInfo, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // origin
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.origin_value;
    b[n].size_ind = &i.origin_size_ind;
    n++;

    // destination
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.destination_value;
    b[n].size_ind = &i.destination_size_ind;
    n++;

    // totalDistance
    //
    b[n].type = mssql::bind::float8;
    b[n].buffer = &i.totalDistance_value;
    b[n].size_ind = &i.totalDistance_size_ind;
    b[n].capacity = 53;
    n++;

    // id
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // Entity base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    {
      root_traits::image_type& ri (root_image (i));

      if (ri.change_callback_.callback != 0)
        (ri.change_callback_.callback) (ri.change_callback_.context);
    }

    // origin
    //
    {
      ::QSharedPointer< ::City > const& v =
        o.origin;

      typedef object_traits< ::City > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::City > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.origin_value, is_null, id);
        i.origin_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.origin_size_ind = SQL_NULL_DATA;
    }

    // destination
    //
    {
      ::QSharedPointer< ::City > const& v =
        o.destination;

      typedef object_traits< ::City > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::City > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.destination_value, is_null, id);
        i.destination_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.destination_size_ind = SQL_NULL_DATA;
    }

    // totalDistance
    //
    {
      double const& v =
        o.totalDistance;

      bool is_null (false);
      mssql::value_traits<
          double,
          mssql::id_float8 >::set_image (
        i.totalDistance_value, is_null, v);
      i.totalDistance_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Entity base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // origin
    //
    {
      ::QSharedPointer< ::City >& v =
        o.origin;

      typedef object_traits< ::City > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::City > > ptr_traits;

      if (i.origin_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.origin_value,
          i.origin_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // destination
    //
    {
      ::QSharedPointer< ::City >& v =
        o.destination;

      typedef object_traits< ::City > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::City > > ptr_traits;

      if (i.destination_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.destination_value,
          i.destination_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // totalDistance
    //
    {
      double& v =
        o.totalDistance;

      mssql::value_traits<
          double,
          mssql::id_float8 >::set_value (
        v,
        i.totalDistance_value,
        i.totalDistance_size_ind == SQL_NULL_DATA);
    }
  }

  const access::object_traits_impl< ::RouteInfo, id_mssql >::info_type
  access::object_traits_impl< ::RouteInfo, id_mssql >::info (
    typeid (::RouteInfo),
    &object_traits_impl< ::db::Entity, id_mssql >::info,
    0,
    "RouteInfo",
    &odb::create_impl< ::RouteInfo >,
    &odb::dispatch_impl< ::RouteInfo, id_mssql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::RouteInfo, id_mssql >::entry_type
  polymorphic_entry_for_RouteInfo;

  const char access::object_traits_impl< ::RouteInfo, id_mssql >::persist_statement[] =
  "INSERT INTO [RouteInfo] "
  "([id], "
  "[origin], "
  "[destination], "
  "[totalDistance]) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::RouteInfo, id_mssql >::find_statements[] =
  {
    "SELECT "
    "[RouteInfo].[origin], "
    "[RouteInfo].[destination], "
    "[RouteInfo].[totalDistance], "
    "[Entity].[id], "
    "[Entity].[typeid], "
    "[Entity].[version] "
    "FROM [RouteInfo] "
    "LEFT JOIN [Entity] ON [Entity].[id]=[RouteInfo].[id] "
    "WHERE [RouteInfo].[id]=?",

    "SELECT "
    "[RouteInfo].[origin], "
    "[RouteInfo].[destination], "
    "[RouteInfo].[totalDistance] "
    "FROM [RouteInfo] "
    "WHERE [RouteInfo].[id]=?"
  };

  const std::size_t access::object_traits_impl< ::RouteInfo, id_mssql >::find_column_counts[] =
  {
    6UL,
    3UL
  };

  const char access::object_traits_impl< ::RouteInfo, id_mssql >::update_statement[] =
  "UPDATE [RouteInfo] "
  "SET "
  "[origin]=?, "
  "[destination]=?, "
  "[totalDistance]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::RouteInfo, id_mssql >::erase_statement[] =
  "DELETE FROM [RouteInfo] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::RouteInfo, id_mssql >::query_statement[] =
  "SELECT\n"
  "[RouteInfo].[origin],\n"
  "[RouteInfo].[destination],\n"
  "[RouteInfo].[totalDistance],\n"
  "[Entity].[id],\n"
  "[Entity].[typeid],\n"
  "[Entity].[version]\n"
  "FROM [RouteInfo]\n"
  "LEFT JOIN [Entity] ON [Entity].[id]=[RouteInfo].[id]\n"
  "LEFT JOIN [City] AS [origin_City] ON [origin_City].[id]=[RouteInfo].[origin]\n"
  "LEFT JOIN [Entity] AS [origin_Entity] ON [origin_Entity].[id]=[origin_City].[id]\n"
  "LEFT JOIN [City] AS [destination_City] ON [destination_City].[id]=[RouteInfo].[destination]\n"
  "LEFT JOIN [Entity] AS [destination_Entity] ON [destination_Entity].[id]=[destination_City].[id]";

  const char access::object_traits_impl< ::RouteInfo, id_mssql >::erase_query_statement[] =
  "DELETE FROM [RouteInfo]";

  const char access::object_traits_impl< ::RouteInfo, id_mssql >::table_name[] =
  "[RouteInfo]";

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    init (im, obj, statement_insert);

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;
    using mssql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
        sts.optimistic_id_image_binding ().version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    root_statements_type& rsts (sts.root_statements ());
    ODB_POTENTIALLY_UNUSED (rsts);

    if (top)
      callback (db, obj, callback_event::pre_erase);

    const id_type& id  (
      obj.id);

    if (top)
    {
      const version_type& v (
        obj.version);
      id_image_type& i (rsts.id_image ());
      init (i, id, &v);

      binding& idb (rsts.id_image_binding ());
      if (i.version != rsts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        rsts.id_image_version (i.version);
        idb.version++;
        rsts.optimistic_id_image_binding ().version++;
      }
    }

    if (top)
    {
      version_type v;
      root_traits::discriminator_ (rsts, id, 0, &v);

      if (v != obj.version)
        throw object_changed ();
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_changed ();

    base_traits::erase (db, obj, false, false);

    if (top)
    {
      pointer_cache_traits::erase (db, id);
      callback (db, obj, callback_event::post_erase);
    }
  }

  access::object_traits_impl< ::RouteInfo, id_mssql >::pointer_type
  access::object_traits_impl< ::RouteInfo, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    auto_result ar;
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement (depth));
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::RouteInfo, id_mssql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::RouteInfo, id_mssql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    if (root_traits::version (rsts.image ()) == obj.version)
      return true;

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::RouteInfo, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mssql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
        sts.optimistic_id_image_binding ().version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::RouteInfo, id_mssql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mssql;

    object_type& obj (static_cast<object_type&> (r));
    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    init (obj, sts.image (), &db, d);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::RouteInfo, id_mssql >::object_type >
  access::object_traits_impl< ::RouteInfo, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mssql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::RouteInfo, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Route
  //

  const char alias_traits<  ::db::Entity,
    id_mssql,
    access::object_traits_impl< ::Route, id_mssql >::info_tag>::
  table_name[] = "[info_Entity]";

  const char alias_traits<  ::RouteInfo,
    id_mssql,
    access::object_traits_impl< ::Route, id_mssql >::info_tag>::
  table_name[] = "[info_RouteInfo]";

  struct access::object_traits_impl< ::Route, id_mssql >::extra_statement_cache_type
  {
    mssql::container_statements_impl< stops_traits > stops;

    extra_statement_cache_type (
      mssql::connection& c,
      image_type&,
      id_image_type&,
      mssql::binding& id,
      mssql::binding&)
    : stops (c, id)
    {
    }
  };

  // stops
  //

  const char access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  select_statement[] =
  "SELECT "
  "[Route_stops].[index], "
  "[Route_stops].[value] "
  "FROM [Route_stops] "
  "WHERE [Route_stops].[object_id]=? ORDER BY [Route_stops].[index]";

  const char access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  insert_statement[] =
  "INSERT INTO [Route_stops] "
  "([object_id], "
  "[index], "
  "[value]) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  delete_statement[] =
  "DELETE FROM [Route_stops] "
  "WHERE [object_id]=?";

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mssql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &d.index_value;
    b[n].size_ind = &d.index_size_ind;
    n++;

    // value
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &d.value_value;
    b[n].size_ind = &d.value_size_ind;
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace mssql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      mssql::value_traits<
          index_type,
          mssql::id_int >::set_image (
        i.index_value, is_null, *j);
      i.index_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // value
    //
    {
      typedef object_traits< ::City > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.value_value, is_null, id);
        i.value_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.value_size_ind = SQL_NULL_DATA;
    }
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      mssql::value_traits<
          index_type,
          mssql::id_int >::set_value (
        j,
        i.index_value,
        i.index_size_ind == SQL_NULL_DATA);
    }

    // value
    //
    {
      typedef object_traits< ::City > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.value_value,
          i.value_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace mssql;
    using mssql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    sts.select_statement ().stream_result ();

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  delete_ (void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mssql;
    using mssql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::Route, id_mssql >::stops_traits::
  erase (statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // info
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.info_value;
    b[n].size_ind = &i.info_size_ind;
    n++;

    // polyline
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.polyline_value;
    b[n].size_ind = &i.polyline_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.polyline_value));
    n++;

    // id
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // Entity base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    {
      root_traits::image_type& ri (root_image (i));

      if (ri.change_callback_.callback != 0)
        (ri.change_callback_.callback) (ri.change_callback_.context);
    }

    // info
    //
    {
      ::QSharedPointer< ::RouteInfo > const& v =
        o.info;

      typedef object_traits< ::RouteInfo > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::RouteInfo > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.info_value, is_null, id);
        i.info_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.info_size_ind = SQL_NULL_DATA;
    }

    // polyline
    //
    {
      ::QString const& v =
        o.polyline;

      bool is_null (true);
      std::size_t size (0);
      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_image (
        i.polyline_value,
        sizeof (i.polyline_value) - 1,
        size,
        is_null,
        v);
      i.polyline_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Entity base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // info
    //
    {
      ::QSharedPointer< ::RouteInfo >& v =
        o.info;

      typedef object_traits< ::RouteInfo > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::RouteInfo > > ptr_traits;

      if (i.info_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.info_value,
          i.info_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // polyline
    //
    {
      ::QString& v =
        o.polyline;

      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_value (
        v,
        i.polyline_value,
        static_cast<std::size_t> (i.polyline_size_ind),
        i.polyline_size_ind == SQL_NULL_DATA);
    }
  }

  const access::object_traits_impl< ::Route, id_mssql >::info_type
  access::object_traits_impl< ::Route, id_mssql >::info (
    typeid (::Route),
    &object_traits_impl< ::db::Entity, id_mssql >::info,
    0,
    "Route",
    &odb::create_impl< ::Route >,
    &odb::dispatch_impl< ::Route, id_mssql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::Route, id_mssql >::entry_type
  polymorphic_entry_for_Route;

  const char access::object_traits_impl< ::Route, id_mssql >::persist_statement[] =
  "INSERT INTO [Route] "
  "([id], "
  "[info], "
  "[polyline]) "
  "VALUES "
  "(?, ?, ?)";

  const char* const access::object_traits_impl< ::Route, id_mssql >::find_statements[] =
  {
    "SELECT "
    "[Route].[info], "
    "[Route].[polyline], "
    "[Entity].[id], "
    "[Entity].[typeid], "
    "[Entity].[version] "
    "FROM [Route] "
    "LEFT JOIN [Entity] ON [Entity].[id]=[Route].[id] "
    "WHERE [Route].[id]=?",

    "SELECT "
    "[Route].[info], "
    "[Route].[polyline] "
    "FROM [Route] "
    "WHERE [Route].[id]=?"
  };

  const std::size_t access::object_traits_impl< ::Route, id_mssql >::find_column_counts[] =
  {
    5UL,
    2UL
  };

  const char access::object_traits_impl< ::Route, id_mssql >::update_statement[] =
  "UPDATE [Route] "
  "SET "
  "[info]=?, "
  "[polyline]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::Route, id_mssql >::erase_statement[] =
  "DELETE FROM [Route] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::Route, id_mssql >::query_statement[] =
  "SELECT\n"
  "[Route].[info],\n"
  "[Route].[polyline],\n"
  "[Entity].[id],\n"
  "[Entity].[typeid],\n"
  "[Entity].[version]\n"
  "FROM [Route]\n"
  "LEFT JOIN [Entity] ON [Entity].[id]=[Route].[id]\n"
  "LEFT JOIN [RouteInfo] AS [info_RouteInfo] ON [info_RouteInfo].[id]=[Route].[info]\n"
  "LEFT JOIN [Entity] AS [info_Entity] ON [info_Entity].[id]=[info_RouteInfo].[id]";

  const char access::object_traits_impl< ::Route, id_mssql >::erase_query_statement[] =
  "DELETE FROM [Route]";

  const char access::object_traits_impl< ::Route, id_mssql >::table_name[] =
  "[Route]";

  void access::object_traits_impl< ::Route, id_mssql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    init (im, obj, statement_insert);

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // stops
    //
    {
      ::QVector< ::QSharedPointer< ::City > > const& v =
        obj.stops;

      stops_traits::persist (
        v,
        esc.stops);
    }

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;
    using mssql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // stops
    //
    {
      ::QVector< ::QSharedPointer< ::City > > const& v =
        obj.stops;

      stops_traits::update (
        v,
        esc.stops);
    }

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
        sts.optimistic_id_image_binding ().version++;
      }
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // stops
    //
    stops_traits::erase (
      esc.stops);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    root_statements_type& rsts (sts.root_statements ());
    ODB_POTENTIALLY_UNUSED (rsts);

    if (top)
      callback (db, obj, callback_event::pre_erase);

    const id_type& id  (
      obj.id);

    if (top)
    {
      const version_type& v (
        obj.version);
      id_image_type& i (rsts.id_image ());
      init (i, id, &v);

      binding& idb (rsts.id_image_binding ());
      if (i.version != rsts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        rsts.id_image_version (i.version);
        idb.version++;
        rsts.optimistic_id_image_binding ().version++;
      }
    }

    if (top)
    {
      version_type v;
      root_traits::discriminator_ (rsts, id, 0, &v);

      if (v != obj.version)
        throw object_changed ();
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // stops
    //
    stops_traits::erase (
      esc.stops);

    if (sts.erase_statement ().execute () != 1)
      throw object_changed ();

    base_traits::erase (db, obj, false, false);

    if (top)
    {
      pointer_cache_traits::erase (db, id);
      callback (db, obj, callback_event::post_erase);
    }
  }

  access::object_traits_impl< ::Route, id_mssql >::pointer_type
  access::object_traits_impl< ::Route, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    auto_result ar;
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement (depth));
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Route, id_mssql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Route, id_mssql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    if (root_traits::version (rsts.image ()) == obj.version)
      return true;

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Route, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mssql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
        sts.optimistic_id_image_binding ().version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // stops
    //
    {
      ::QVector< ::QSharedPointer< ::City > >& v =
        obj.stops;

      stops_traits::load (
        v,
        esc.stops);
    }
  }

  void access::object_traits_impl< ::Route, id_mssql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mssql;

    object_type& obj (static_cast<object_type&> (r));
    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    init (obj, sts.image (), &db, d);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::Route, id_mssql >::object_type >
  access::object_traits_impl< ::Route, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mssql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Route, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
