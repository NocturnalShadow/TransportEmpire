// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // City
  //

  inline
  access::object_traits< ::City >::id_type
  access::object_traits< ::City >::
  id (const object_type& o)
  {
    return object_traits< ::db::Entity >::id (o);
  }

  inline
  void access::object_traits< ::City >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::City >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

#include <odb/details/unique-ptr.hxx>

namespace odb
{
  // City
  //

  inline
  void access::object_traits_impl< ::City, id_mssql >::
  bind (mssql::bind* b, id_image_type& i, bool bv)
  {
    object_traits_impl< ::db::Entity, id_mssql >::bind (b, i, bv);
  }

  inline
  void access::object_traits_impl< ::City, id_mssql >::
  init (id_image_type& i, const id_type& id, const version_type* v)
  {
    object_traits_impl< ::db::Entity, id_mssql >::init (i, id, v);
  }

  inline
  bool access::object_traits_impl< ::City, id_mssql >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::City, id_mssql >::
  update_version (std::size_t* v, const image_type& i, mssql::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  inline
  access::object_traits_impl< ::City, id_mssql >::root_traits::image_type&
  access::object_traits_impl< ::City, id_mssql >::
  root_image (image_type& i)
  {
    return base_traits::root_image (*i.base);
  }

  inline
  access::object_traits_impl< ::City, id_mssql >::image_type*
  access::object_traits_impl< ::City, id_mssql >::
  clone_image (image_type& i)
  {
    details::unique_ptr<base_traits::image_type> p (
      base_traits::clone_image (*i.base));
    image_type* c (new image_type (i));
    c->base = p.release ();
    return c;
  }

  inline
  void access::object_traits_impl< ::City, id_mssql >::
  copy_image (image_type& d, image_type& s)
  {
    base_traits::image_type* b (d.base);
    base_traits::copy_image (*b, *s.base);
    d = s;
    d.base = b;
  }

  inline
  void access::object_traits_impl< ::City, id_mssql >::
  free_image (image_type* i)
  {
    base_traits::free_image (i->base);
    delete i;
  }
}

