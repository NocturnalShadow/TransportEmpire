// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ROUTE_ODB_H
#define ROUTE_ODB_H

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/mssql/qstring-traits.hxx>
#include <odb/qt/basic/mssql/qbyte-array-traits.hxx>
#include <odb/qt/basic/mssql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/mssql/qdate-traits.hxx>
#include <odb/qt/date-time/mssql/qtime-traits.hxx>
#include <odb/qt/date-time/mssql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Model/Route.h"

#include "Database/Mapping/Entity-odb.h"
#include "Model/Mapping/City-odb.h"
#include "Model/Mapping/Location-odb.h"

#include <memory>
#include <cstddef>
#include <string>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/polymorphic-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // RouteInfo
  //
  template <>
  struct class_traits< ::RouteInfo >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::RouteInfo >
  {
    public:
    typedef ::RouteInfo object_type;
    typedef ::QSharedPointer< ::RouteInfo > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::db::Entity root_type;
    typedef ::db::Entity base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::db::Entity >::id_type id_type;
    typedef object_traits< ::db::Entity >::version_type version_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      object_traits<root_type>::pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      root_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Route
  //
  template <>
  struct class_traits< ::Route >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Route >
  {
    public:
    typedef ::Route object_type;
    typedef ::QSharedPointer< ::Route > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::db::Entity root_type;
    typedef ::db::Entity base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::db::Entity >::id_type id_type;
    typedef object_traits< ::db::Entity >::version_type version_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      object_traits<root_type>::pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      root_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // RouteInfo
  //
  template <typename A>
  struct pointer_query_columns< ::RouteInfo, id_mssql, A >:
    pointer_query_columns< ::db::Entity, id_mssql, typename A::base_traits >
  {
    // Entity
    //
    typedef pointer_query_columns< ::db::Entity, id_mssql, typename A::base_traits > Entity;

    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // origin
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    origin_type_;

    static const origin_type_ origin;

    // destination
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    destination_type_;

    static const destination_type_ destination;

    // totalDistance
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        double,
        mssql::id_float8 >::query_type,
      mssql::id_float8 >
    totalDistance_type_;

    static const totalDistance_type_ totalDistance;
  };

  template <typename A>
  const typename pointer_query_columns< ::RouteInfo, id_mssql, A >::id_type_
  pointer_query_columns< ::RouteInfo, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::RouteInfo, id_mssql, A >::origin_type_
  pointer_query_columns< ::RouteInfo, id_mssql, A >::
  origin (A::table_name, "[origin]", 0);

  template <typename A>
  const typename pointer_query_columns< ::RouteInfo, id_mssql, A >::destination_type_
  pointer_query_columns< ::RouteInfo, id_mssql, A >::
  destination (A::table_name, "[destination]", 0);

  template <typename A>
  const typename pointer_query_columns< ::RouteInfo, id_mssql, A >::totalDistance_type_
  pointer_query_columns< ::RouteInfo, id_mssql, A >::
  totalDistance (A::table_name, "[totalDistance]", 0, 53);

  template <>
  class access::object_traits_impl< ::RouteInfo, id_mssql >:
    public access::object_traits< ::RouteInfo >
  {
    public:
    typedef polymorphic_entry<object_type, id_mssql> entry_type;
    typedef object_traits_impl<root_type, id_mssql> root_traits;
    typedef object_traits_impl<base_type, id_mssql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // origin
      //
      int origin_value;
      SQLLEN origin_size_ind;

      // destination
      //
      int destination_value;
      SQLLEN destination_size_ind;

      // totalDistance
      //
      double totalDistance_value;
      SQLLEN totalDistance_size_ind;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct origin_tag;
    struct destination_tag;

    using object_traits<object_type>::id;

    static void
    bind (mssql::bind*,
          const mssql::bind* id,
          std::size_t id_size,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&, bool bind_version = true);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&, const version_type* = 0);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mssql::binding*);

    typedef
    mssql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mssql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);

    static root_traits::image_type&
    root_image (image_type&);

    static image_type*
    clone_image (image_type&);

    static void
    copy_image (image_type&, image_type&);

    static void
    free_image (image_type*);
  };

  template <>
  class access::object_traits_impl< ::RouteInfo, id_common >:
    public access::object_traits_impl< ::RouteInfo, id_mssql >
  {
  };

  // Route
  //
  template <typename A>
  struct pointer_query_columns< ::Route, id_mssql, A >:
    pointer_query_columns< ::db::Entity, id_mssql, typename A::base_traits >
  {
    // Entity
    //
    typedef pointer_query_columns< ::db::Entity, id_mssql, typename A::base_traits > Entity;

    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // info
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    info_type_;

    static const info_type_ info;

    // polyline
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QString,
        mssql::id_string >::query_type,
      mssql::id_string >
    polyline_type_;

    static const polyline_type_ polyline;
  };

  template <typename A>
  const typename pointer_query_columns< ::Route, id_mssql, A >::id_type_
  pointer_query_columns< ::Route, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::Route, id_mssql, A >::info_type_
  pointer_query_columns< ::Route, id_mssql, A >::
  info (A::table_name, "[info]", 0);

  template <typename A>
  const typename pointer_query_columns< ::Route, id_mssql, A >::polyline_type_
  pointer_query_columns< ::Route, id_mssql, A >::
  polyline (A::table_name, "[polyline]", 0, 512);

  template <>
  class access::object_traits_impl< ::Route, id_mssql >:
    public access::object_traits< ::Route >
  {
    public:
    typedef polymorphic_entry<object_type, id_mssql> entry_type;
    typedef object_traits_impl<root_type, id_mssql> root_traits;
    typedef object_traits_impl<base_type, id_mssql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // info
      //
      int info_value;
      SQLLEN info_size_ind;

      // polyline
      //
      char polyline_value[513];
      SQLLEN polyline_size_ind;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // stops
    //
    struct stops_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::QVector< ::QSharedPointer< ::City > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< stops_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        int index_value;
        SQLLEN index_size_ind;

        // value
        //
        int value_value;
        SQLLEN value_size_ind;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct info_tag;

    using object_traits<object_type>::id;

    static void
    bind (mssql::bind*,
          const mssql::bind* id,
          std::size_t id_size,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&, bool bind_version = true);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&, const version_type* = 0);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mssql::binding*);

    typedef
    mssql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mssql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);

    static root_traits::image_type&
    root_image (image_type&);

    static image_type*
    clone_image (image_type&);

    static void
    copy_image (image_type&, image_type&);

    static void
    free_image (image_type*);
  };

  template <>
  class access::object_traits_impl< ::Route, id_common >:
    public access::object_traits_impl< ::Route, id_mssql >
  {
  };

  // RouteInfo
  //
  template <>
  struct alias_traits<
    ::db::Entity,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::origin_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::City,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::origin_tag>
  {
    typedef alias_traits<
      ::db::Entity,
      id_mssql,
      access::object_traits_impl< ::RouteInfo, id_mssql >::origin_tag>
    base_traits;

    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::db::Entity,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::destination_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::City,
    id_mssql,
    access::object_traits_impl< ::RouteInfo, id_mssql >::destination_tag>
  {
    typedef alias_traits<
      ::db::Entity,
      id_mssql,
      access::object_traits_impl< ::RouteInfo, id_mssql >::destination_tag>
    base_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::RouteInfo, id_mssql >
  {
    // origin
    //
    typedef
    odb::alias_traits<
      ::City,
      id_mssql,
      access::object_traits_impl< ::RouteInfo, id_mssql >::origin_tag>
    origin_alias_;

    // destination
    //
    typedef
    odb::alias_traits<
      ::City,
      id_mssql,
      access::object_traits_impl< ::RouteInfo, id_mssql >::destination_tag>
    destination_alias_;
  };

  template <typename A>
  struct query_columns< ::RouteInfo, id_mssql, A >:
    query_columns_base< ::RouteInfo, id_mssql >,
    query_columns< ::db::Entity, id_mssql, typename A::base_traits >
  {
    // Entity
    //
    typedef query_columns< ::db::Entity, id_mssql, typename A::base_traits > Entity;

    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // origin
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    origin_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::City,
        id_mssql,
        origin_alias_ > >
    origin_pointer_type_;

    struct origin_type_: origin_pointer_type_, origin_column_type_
    {
      origin_type_ (const char* t,
                    const char* c,
                    const char* conv,
                    unsigned short p = 0,
                    unsigned short s = 0xFFFF)
        : origin_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const origin_type_ origin;

    // destination
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    destination_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::City,
        id_mssql,
        destination_alias_ > >
    destination_pointer_type_;

    struct destination_type_: destination_pointer_type_, destination_column_type_
    {
      destination_type_ (const char* t,
                         const char* c,
                         const char* conv,
                         unsigned short p = 0,
                         unsigned short s = 0xFFFF)
        : destination_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const destination_type_ destination;

    // totalDistance
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        double,
        mssql::id_float8 >::query_type,
      mssql::id_float8 >
    totalDistance_type_;

    static const totalDistance_type_ totalDistance;
  };

  template <typename A>
  const typename query_columns< ::RouteInfo, id_mssql, A >::id_type_
  query_columns< ::RouteInfo, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::RouteInfo, id_mssql, A >::origin_type_
  query_columns< ::RouteInfo, id_mssql, A >::
  origin (A::table_name, "[origin]", 0);

  template <typename A>
  const typename query_columns< ::RouteInfo, id_mssql, A >::destination_type_
  query_columns< ::RouteInfo, id_mssql, A >::
  destination (A::table_name, "[destination]", 0);

  template <typename A>
  const typename query_columns< ::RouteInfo, id_mssql, A >::totalDistance_type_
  query_columns< ::RouteInfo, id_mssql, A >::
  totalDistance (A::table_name, "[totalDistance]", 0, 53);

  // Route
  //
  template <>
  struct alias_traits<
    ::db::Entity,
    id_mssql,
    access::object_traits_impl< ::Route, id_mssql >::info_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::RouteInfo,
    id_mssql,
    access::object_traits_impl< ::Route, id_mssql >::info_tag>
  {
    typedef alias_traits<
      ::db::Entity,
      id_mssql,
      access::object_traits_impl< ::Route, id_mssql >::info_tag>
    base_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::Route, id_mssql >
  {
    // info
    //
    typedef
    odb::alias_traits<
      ::RouteInfo,
      id_mssql,
      access::object_traits_impl< ::Route, id_mssql >::info_tag>
    info_alias_;
  };

  template <typename A>
  struct query_columns< ::Route, id_mssql, A >:
    query_columns_base< ::Route, id_mssql >,
    query_columns< ::db::Entity, id_mssql, typename A::base_traits >
  {
    // Entity
    //
    typedef query_columns< ::db::Entity, id_mssql, typename A::base_traits > Entity;

    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // info
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    info_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::RouteInfo,
        id_mssql,
        info_alias_ > >
    info_pointer_type_;

    struct info_type_: info_pointer_type_, info_column_type_
    {
      info_type_ (const char* t,
                  const char* c,
                  const char* conv,
                  unsigned short p = 0,
                  unsigned short s = 0xFFFF)
        : info_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const info_type_ info;

    // polyline
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QString,
        mssql::id_string >::query_type,
      mssql::id_string >
    polyline_type_;

    static const polyline_type_ polyline;
  };

  template <typename A>
  const typename query_columns< ::Route, id_mssql, A >::id_type_
  query_columns< ::Route, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::Route, id_mssql, A >::info_type_
  query_columns< ::Route, id_mssql, A >::
  info (A::table_name, "[info]", 0);

  template <typename A>
  const typename query_columns< ::Route, id_mssql, A >::polyline_type_
  query_columns< ::Route, id_mssql, A >::
  polyline (A::table_name, "[polyline]", 0, 512);
}

#include "Route-odb-inl.h"

#include <odb/post.hxx>

#endif // ROUTE_ODB_H
